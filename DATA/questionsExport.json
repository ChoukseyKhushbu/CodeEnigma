{ "_id" : { "$oid" : "5a6a157fc2f89d360c403640" }, "difficulty" : "easy", "id" : "", "title" : "XXX", "description" : " \n<h5>Print Odd Numbers</h5>\n\nGiven two integers <em>start</em> and <em>end</em>. Print all the odd number within the range <em>[start, end] </em>i.e. Closed Interval.\n\n<br><br>\n\n<h6>Input Format:</h6>\n<ul>\n    <li>First line contains an integer <em>start</em>.</li>\n    <li>Second line contains an integer <em>end</em>.</li>\n</ul>\n\n<h6>Output Format:</h6>\n\nAll the odd numbers within the range <em>[start, end] </em> in separate lines (In increasing order).\n\n<br><br>\n\n\n<h6>Sample Input:</h6>\n<pre class=\"code\"> 11\n 18\n</pre>\n\n<h6>Sample Output:</h6>\n<pre class=\"code\"> 11\n 13\n 15\n 17\n</pre>\n\n\n<div style=\"background-color:#202020; color:#FFF; padding:15px; border: 5px solid #FFBE4A; margin-top:0px\">\n<h5>Note:</h5>\n\nIf you are not able to understand how input and output works, ask your senior right now. Otherwise you may face problem in the actual competition.\n</div>\n\n                      ", "shortDescription" : "", "sampleInput" : "", "sampleOutput" : "", "hiddenInput" : "", "hiddenOutput" : "", "__v" : 0 }
{ "_id" : { "$oid" : "5a7b17c2ada00f04148d38a1" }, "difficulty" : "medium", "id" : "M2", "title" : "Check whether the point lies inside a triangle", "description" : "<h5>Check whether the point lies inside a triangle</h5>\r\n\r\nGiven the coordinates of a point <code style=\"color:#000;\">P(x,y)</code> and the vertices of the triangle <code style=\"color:#000;\">A(x1,y1), B(x2,y2) and C(x3,y3).</code> Determine whether the point lies inside the triangle or not.\r\n\r\n<br><br>\r\n\r\n<h6>Input Format:</h6>\r\n<ul>\r\n    <li>First line contains an integer <code style=\"color:#000;\">T</code>, number of testcases.</li>\r\n    <li>Next T lines contains the coordinates in the format <code style=\"color:#000;\">x y x1 y1 x2 y2 x3 y3</code>.</li>\r\n</ul>\r\n\r\n<h6>Output Format:</h6>\r\n\r\nFor each set of coordinates check whether the point lies inside the triangle or not, and print <code style=\"color:#000;\">Inside</code> or <code style=\"color:#000;\">Outside</code> respectively.\r\n\r\n\r\n<br><br>\r\n\r\n\r\n<img src=\"/graph.png\" style=\"width:50%; float:right;\">\r\n<h6>Sample Input:</h6>\r\n\r\n<pre class=\"code\" style=\"width:45%;\">2\r\n5 3 1 1 7 9 10 -2\r\n2 6 7 9 1 1 10 -2\r\n</pre>\r\n\r\n<h6>Sample Output:</h6>\r\n<pre class=\"code\" style=\"width:45%;\">Inside\r\nOutside\r\n\r\n</pre>\r\n\r\n<h6>Explaination:</h6>\r\n\r\n<ul style=\"width:45%;\">\r\n    <li>The point P(5,3) lies inside the triangle described by the points A(1,1), B(7,9) and C(10,-2), hence output is <em>Inside</em>.</li>\r\n    <li>The point P(2,6) lies outside the triangle described by the points A(7,9), B(1,1) and C(10,-2), hence output is <em>Outside</em>.</li>\r\n</ul>", "shortDescription" : "Given the coordinates of a point <em>P(x,y)</em> and the vertices of the triangle <em>A(x1,y1), B(x2,y2) and C(x3,y3).</em> Determine whether the point lies inside the triangle or not.", "sampleInput" : "2\n5 3 1 1 7 9 10 -2\n2 6 7 9 1 1 10 -2", "sampleOutput" : "Inside\nOutside\n", "hiddenInput" : "10\n97 3 -29 85 17 6 -26 88\n-56 -12 -41 -15 -12 49 -42 -88\n3 -51 -97 34 76 18 -49 70\n94 -69 -77 -22 -71 -64 -34 -47\n19 -82 -96 50 59 -14 76 -20\n12 -14 15 -61 17 52 -54 7\n-19 -38 -7 -56 -70 72 -79 -22\n49 -14 100 2 36 -84 59 89\n-7 -52 58 -29 89 20 -97 -88\n66 -29 50 -22 -83 -56 99 -28", "hiddenOutput" : "Outside\nOutside\nOutside\nOutside\nOutside\nInside\nInside\nInside\nInside\nInside\n", "__v" : 0 }
{ "_id" : { "$oid" : "5a7c59b48151a73484d8dcae" }, "difficulty" : "medium", "id" : "M1", "title" : "Cancel the Game?", "description" : "<h5>Cancel the Game?</h5>\r\n\r\nFour friends are playing a card game in which the game is cancelled if a single player gets all the Aces(A). Given <code class=\"inlineCode\">T</code> different shuffled decks, for each deck determine whether the game will be cancelled or not.\r\n\r\n<br><br>\r\n\r\n<h6>Input Format:</h6>\r\nEach card is represent in the format <code class=\"inlineCode\">FaceValue-Suit</code>, for example: <code class=\"inlineCode\">K-S</code> represents \"King of Spade\".\r\n<ul>\r\n    <li>First line contains an integer <code class=\"inlineCode\">T</code>, the number of shuffled decks.</li>\r\n    <li>Next <code class=\"inlineCode\">T</code> lines contains the different shuffled decks <code class=\"inlineCode\">d<sub>1</sub>, d<sub>2</sub>, d<sub>3</sub>, ..., d<sub>T</sub></code>.</li>\r\n</ul>\r\n\r\n<h6>Output Format:</h6>\r\n\r\nFor each deck print <code class=\"inlineCode\">Cancelled</code> or <code class=\"inlineCode\">Not Cancelled</code>.\r\n\r\n<br><br>\r\n\r\n\r\n<h6>Sample Input:</h6>\r\n<pre class=\"code\">2                                                    \r\nA-D Q-H 7-C Q-C 5-S A-H 3-H 2-S 2-D K-D A-C 5-H 7-H 10-C 3-S 9-C 8-C 4-D 10-D 5-C 2-C 6-H 3-D 4-C A-S J-D J-C 3-C 9-D 4-H J-S 7-S 6-D J-H 6-S 9-H Q-S 8-D 10-H 8-H 5-D K-S K-C 9-S 2-H Q-D 7-D 4-S 6-C 10-S K-H 8-S\r\n10-D 9-D A-C 3-C K-D J-C A-S 8-D 7-D Q-S 3-H K-S J-S J-H A-D 6-S 4-H 2-C A-H 4-S 8-S Q-C 6-H 4-D Q-H 10-H 5-S K-H 6-D 8-C 10-S 10-C 2-S 8-H 7-C 2-D 3-S 7-H Q-D 5-H 5-C 7-S 6-C 3-D 2-H K-C 9-S J-D 9-H 4-C 9-C 5-D\r\n</pre>\r\n\r\n<h6>Sample Output:</h6>\r\n<pre class=\"code\">Not Cancelled\r\nCancelled\r\n\r\n</pre>\r\n\r\n<h6>Explaination:</h6>\r\n<ul>\r\n    <li>First player gets 2 Aces, Second & Third player both get 1 Ace each; Fourth player gets 0 Ace. hence the game is not cancelled.</li>\r\n    <li>Third player gets all the Aces, hence the game is cancelled.</li>\r\n</ul>\r\n", "shortDescription" : "Four friends are playing a card game in which the game is cancelled if a single player gets all the Aces(A). Given <em>T</em> different shuffled decks, for each deck determine whether the game will be cancelled or not.", "sampleInput" : "2                                                    \nA-D Q-H 7-C Q-C 5-S A-H 3-H 2-S 2-D K-D A-C 5-H 7-H 10-C 3-S 9-C 8-C 4-D 10-D 5-C 2-C 6-H 3-D 4-C A-S J-D J-C 3-C 9-D 4-H J-S 7-S 6-D J-H 6-S 9-H Q-S 8-D 10-H 8-H 5-D K-S K-C 9-S 2-H Q-D 7-D 4-S 6-C 10-S K-H 8-S\n10-D 9-D A-C 3-C K-D J-C A-S 8-D 7-D Q-S 3-H K-S J-S J-H A-D 6-S 4-H 2-C A-H 4-S 8-S Q-C 6-H 4-D Q-H 10-H 5-S K-H 6-D 8-C 10-S 10-C 2-S 8-H 7-C 2-D 3-S 7-H Q-D 5-H 5-C 7-S 6-C 3-D 2-H K-C 9-S J-D 9-H 4-C 9-C 5-D", "sampleOutput" : "Not Cancelled\nCancelled\n", "hiddenInput" : "8\n6-S 4-H 7-D 10-C 6-C 10-H 8-D J-C 7-C 2-C 2-H 7-S A-C 5-C 4-D A-S K-S 10-S 4-S 8-C 9-S K-D 3-H K-C 9-H 9-C 3-D A-H 5-H J-H 10-D 2-D Q-H 9-D 8-S J-S 8-H 4-C 6-H Q-D 3-S 5-D 2-S 6-D 7-H A-D J-D Q-S Q-C 3-C K-H 5-S\nK-S 8-S 5-D 4-C 9-H K-H A-C Q-S 6-D 9-C A-S J-C 6-C 8-C 2-D 7-C J-D 6-S 4-H 7-H 7-D 2-S A-H 10-S 9-D 10-H A-D 10-D 8-H 10-C Q-H K-C 4-S Q-D 7-S 9-S 4-D K-D J-H 3-C J-S 5-H 6-H 5-S Q-C 2-C 3-S 3-D 3-H 2-H 5-C 8-D\n10-C 6-H 2-D Q-H 7-C 9-D J-S 6-D 5-S 4-D Q-S 6-C J-H 5-C 8-S 2-S 5-D 9-H 10-H 4-H A-C J-D 8-H Q-D 5-H 6-S A-H 2-C 4-S 4-C 7-D 3-C 7-S 10-D 8-C 9-C K-D K-H K-C A-S 8-D 7-H J-C 2-H 3-H K-S 3-S Q-C A-D 3-D 9-S 10-S\n8-C K-H Q-D 7-S J-S K-D 6-D J-H A-H K-C 9-D J-C J-D 10-S 7-H 5-D Q-H 4-C 7-C 6-C A-S 2-H 2-S 2-D 5-H 3-H 4-D 6-H K-S 9-S 8-H 4-H 6-S 9-C 5-S 9-H 3-C 8-S 5-C 10-C A-C 3-D 10-D 4-S A-D 3-S 10-H Q-C 7-D Q-S 2-C 8-D\n7-S 6-S Q-S Q-C 8-S K-H 10-C 7-D K-C J-S 2-C 3-S J-H J-D 5-H 6-H K-D Q-H 3-H 2-D A-D 4-C 9-D 3-D 10-S 3-C 9-S 9-H 4-S 7-H Q-D 7-C A-S 8-C J-C 4-D A-H 8-H 8-D 9-C A-C 6-C 5-S 5-C 6-D 10-H 10-D 4-H K-S 2-H 5-D 2-S\n9-C 10-S 2-D 5-C 9-D 4-C 2-H 7-D A-C 6-S K-S J-S Q-S K-D Q-C Q-D 8-C 3-S 6-H A-D 5-H J-C J-D 4-H J-H 3-D 3-C 8-H 8-S 6-D 7-C K-C 9-S 5-D Q-H 3-H 4-D 8-D A-H 7-H 2-C 4-S 6-C 2-S 7-S 10-H A-S 10-C 5-S K-H 10-D 9-H\n10-C 6-H 2-D Q-H 7-C 9-D J-S 6-D 5-S 4-D Q-S 6-C J-H 5-C 8-S 2-S 5-D 9-H 10-H 4-H A-C J-D 8-H Q-D 5-H 6-S A-H 2-C 4-S 4-C 7-D 3-C 7-S 10-D 8-C 9-C K-D K-H K-C A-S 8-D 7-H J-C 2-H 3-H K-S 3-S Q-C A-D 3-D 9-S 10-S\n7-S Q-D 9-D A-S 2-S 4-D 7-D A-H Q-H Q-C 8-S Q-S 9-C 3-H K-H A-C 4-S J-C 5-D 10-C 6-S K-D 7-C J-H 3-S K-S 3-D A-D 10-S 2-H 6-H J-S K-C 5-S 5-C 9-S 8-D 10-H 8-C 5-H 7-H 4-H 4-C 8-H 9-H 6-D 6-C J-D 2-D 10-D 3-C 2-C", "hiddenOutput" : "Not Cancelled\nCancelled\nNot Cancelled\nCancelled\nCancelled\nNot Cancelled\nNot Cancelled\nCancelled\n", "__v" : 0 }
{ "_id" : { "$oid" : "5a7cacfe019cb83264e1daac" }, "difficulty" : "easy", "id" : "E1", "title" : "Improper to Mixed Fraction", "description" : "\n<h5>Improper to Mixed Fraction</h5>\nGiven two integers <code style=\"color:#000\">Numberator</code> and <code style=\"color:#000\">Denomintator</code> such that <code style=\"color:#000\">Numberator/Denominator</code> is a reduced improper fraction, find it's equivalent reduced mixed fraction.\n\n<br><br>\n\n<h6>Input Format:</h6>\n<ul>\n    <li>First line contains an integer <code style=\"color:#000\">T</code>, the number of reduced improper fractions.</li>\n    <li>Next <code class=\"inlineCode\">T</code> lines contains the different reduced improper fractions <code class=\"inlineCode\">f<sub>1</sub>, f<sub>2</sub>, f<sub>3</sub>, ..., f<sub>T</sub></code>.</li>\n    <li>Each improper fraction is represented by a set of two numbers <code style=\"color:#000\">Numberator Denominator</code></li>\n</ul>\n\n<h6>Output Format:</h6>\n\nFor each reduced improper fraction <code class=\"inlineCode\">f<sub>1</sub>, f<sub>2</sub>, f<sub>3</sub>, ..., f<sub>T</sub></code> print it's equivalent reduced mixed fraction (each in newline).\n\n<br><br>\n\n\n<h6>Sample Input:</h6>\n<pre class=\"code\">4\n7 2\n10 3\n40 7\n4507 233\n</pre>\n\n<h6>Sample Output:</h6>\n<pre class=\"code\">3 1 2\n3 1 3\n5 5 7\n19 80 233\n\n</pre>\n\n\n<h6>Explaination:</h6>\n<ul>\n    <li>7/2 = 3 + 1/2.</li>\n    <li>10/3 = 3 + 1/3</li>\n    <li>40/7 = 5 + 5/7</li>\n    <li>4507/233 = 19 + 80/233</li>\n    \n</ul>", "shortDescription" : "Given two integers <em >Numberator</em> and <em >Denomintator</em> such that <em >Numberator/Denominator</em> is a reduced improper fraction, find it's equivalent reduced mixed fraction.", "sampleInput" : "4\n7 2\n10 3\n40 7\n4507 233", "sampleOutput" : "3 1 2\n3 1 3\n5 5 7\n19 80 233\n", "hiddenInput" : "10\n1327 181\n2003 1759\n2539 1607\n1283 229\n661 103\n3847 1091\n2243 797\n3079 3\n2963 241\n4507 233", "hiddenOutput" : "7 60 181\n1 244 1759\n1 932 1607\n5 138 229\n6 43 103\n3 574 1091\n2 649 797\n1026 1 3\n12 71 241\n19 80 233\n", "__v" : 0 }
{ "_id" : { "$oid" : "5a829edf1bb07e1fdcd7da85" }, "difficulty" : "easy", "id" : "E2", "title" : "Sum Below Bound", "description" : "\n<h5>Sum Below Bound</h5>\nGiven an integer <code style=\"color:#000\">bound</code>, find the maximal integer <code style=\"color:#000\">n</code> such that <code style=\"color:#000\">1 + 2 + ... + n ≤ bound</code>\n\n<br><br>\n\n<h6>Input Format:</h6>\n<ul>\n    <li>First line contains an integer <code style=\"color:#000\">T</code>, the number of test cases.</li>\n    <li>Next <code class=\"inlineCode\">T</code> lines contains the different bounds <code class=\"inlineCode\">b<sub>1</sub>, b<sub>2</sub>, b<sub>3</sub>, ..., b<sub>T</sub></code>.</li>\n</ul>\n\n<h6>Output Format:</h6>\n\nFor each bound <code class=\"inlineCode\">b<sub>1</sub>, b<sub>2</sub>, b<sub>3</sub>, ..., b<sub>T</sub></code> print the maximal interger <code style=\"color:#000\">n</code> such that <code style=\"color:#000\">1 + 2 + ... + n ≤ bound</code>\n\n<br><br>\n\n\n<h6>Sample Input:</h6>\n<pre class=\"code\">4\n15\n11\n524\n1251\n</pre>\n\n<h6>Sample Output:</h6>\n<pre class=\"code\">5\n4\n31\n49\n\n</pre>\n\n\n<h6>Explaination:</h6>\n<ul>\n    <li>5 is the maximal integer such that <code style=\"color:#000\">1 + 2 + 3 + 4 + 5 ≤ 15</code></li>\n    <li>4 is the maximal integer such that <code style=\"color:#000\">1 + 2 + 3 + 4 ≤ 11</code></li>\n    <li>31 is the maximal integer such that <code style=\"color:#000\">1 + 2 + ... + 31 ≤ 524</code></li>\n    <li>49 is the maximal integer such that <code style=\"color:#000\">1 + 2 + ... + 49 ≤ 1251</code></li>\n</ul>", "shortDescription" : "Given an integer <em>bound</em>, find the maximal integer <em>n</em> such that <em>1 + 2 + ... + n ≤ bound</em>", "sampleInput" : "4\n15\n11\n524\n1251", "sampleOutput" : "5\n4\n31\n49\n", "hiddenInput" : "15\n3331\n5445\n923\n8618\n8595\n2495\n4955\n4619\n1680\n6780\n1225\n406\n1653\n3\n4560", "hiddenOutput" : "81\n103\n42\n130\n130\n70\n99\n95\n57\n115\n49\n28\n57\n2\n95\n", "__v" : 0 }
{ "_id" : { "$oid" : "5a82c6971bb07e1fdcd7da87" }, "difficulty" : "easy", "id" : "E3", "title" : "Divide as long as Possible", "description" : "<h5>Divide as long as Possible</h5>\r\nGiven two integers <code style=\"color:#000\">n</code> and <code style=\"color:#000\">d</code>, divide <code style=\"color:#000\">n</code> by <code style=\"color:#000\">d</code> as long as the result is integer and print the result.\r\n\r\n\r\n<br><br>\r\n\r\n<h6>Input Format:</h6>\r\n<ul>\r\n    <li>First line contains an integer <code style=\"color:#000\">T</code>, the number of test cases.</li>\r\n    <li>Next <code class=\"inlineCode\">T</code> lines contains <code class=\"inlineCode\">n<sub>1</sub> d<sub>1</sub>, n<sub>2</sub> b<sub>2</sub>, n<sub>3</sub> b<sub>3</sub>, ..., n<sub>T</sub> b<sub>T</sub></code></li>\r\n     where <code class=\"inlineCode\">( n ≤ 270000000 & d ≤ 20 )</code>\r\n</ul>\r\n\r\n<h6>Output Format:</h6>\r\n\r\nFor each <code class=\"inlineCode\">n<sub>1</sub> d<sub>1</sub>, n<sub>2</sub> b<sub>2</sub>, n<sub>3</sub> b<sub>3</sub>, ..., n<sub>T</sub> b<sub>T</sub></code> print the result.\r\n\r\n<br><br>\r\n\r\n\r\n<h6>Sample Input:</h6>\r\n<pre class=\"code\">4\r\n36 3\r\n16 2\r\n31 17\r\n960 2\r\n</pre>\r\n\r\n<h6>Sample Output:</h6>\r\n<pre class=\"code\">4\r\n1\r\n31\r\n15\r\n\r\n</pre>\r\n\r\n<h6>Explaination:</h6>\r\n<ul>\r\n    <li>On dividing 36 by 3 continously we get <code class=\"inlineCode\">36 -> 12 -> 4</code>, hence output is <code class=\"inlineCode\">4</code>.</li>\r\n    <li>On dividing 16 by 2 continously we get <code class=\"inlineCode\">16 -> 8 -> 4 -> 2 -> 1</code>, hence output is <code class=\"inlineCode\">1</code>.</li>\r\n    <li>31 is not divisible by 17,  hence output is <code class=\"inlineCode\">31</code>.</li>\r\n    <li>On dividing 960 by 2 continously we get <code class=\"inlineCode\">960 -> 480 -> 240 -> 120 -> 60 -> 30 -> 15</code>,  hence output is <code class=\"inlineCode\">15</code>.</li>\r\n\r\n</ul>\r\n", "shortDescription" : "Given two integers <em>n</em> and <em>d</em>, divide <em>n</em> by <em>d</em> as long as the result is integer and print the result.", "sampleInput" : "4\n36 3\n16 2\n31 17\n960 2", "sampleOutput" : "4\n1\n31\n15\n", "hiddenInput" : "10\n1524096 6\n30233088 6\n1180980 9\n93312 3\n540 6\n790272 14\n9576 19\n268435456 16\n19200 10\n7200 10", "hiddenOutput" : "196\n3\n20\n128\n15\n288\n504\n1\n192\n72\n", "__v" : 0 }
{ "_id" : { "$oid" : "5a8494dbd0dc8a2fb89d4558" }, "difficulty" : "easy", "id" : "E4", "title" : "First Multiple", "description" : "\n<h5>First Multiple</h5>\nFind the smallest integer not less than the given integer <code style=\"color:#000\">start</code> which is divisible by all the divisors <code style=\"color:#000\">\n    d<sub>1</sub>, d<sub>2</sub>, d<sub>3</sub>, ..., d<sub>n</sub></code>\n\n<br><br>\n\n<h6>Input Format:</h6>\n<ul>\n    <pre class=\"code\" style=\"width:50%; float:right; margin-left:10px;\">\nT\nstart<sub>1</sub> n<sub>1</sub> d<sub>1</sub>, d<sub>2</sub>, d<sub>3</sub>, ..., d<sub>n<sub>1</sub></sub>\nstart<sub>2</sub> n<sub>2</sub> d<sub>1</sub>, d<sub>2</sub>, d<sub>3</sub>, ..., d<sub>n<sub>2</sub></sub>\n...\nstart<sub>T</sub> n<sub>T</sub> d<sub>1</sub>, d<sub>2</sub>, d<sub>3</sub>, ..., d<sub>n<sub>T</sub></sub>\n</pre>\n\n    <li>First line contains an integer <code style=\"color:#000\">T</code>, the number of test cases.</li>\n    <li>Next <code class=\"inlineCode\">T</code> lines contains an integer <code style=\"color:#000\">start</code>, followed by an integer <code style=\"color:#000\">n</code> followed by n different divisors <code class=\"inlineCode\">d<sub>1</sub>, d<sub>2</sub>, d<sub>3</sub>, ..., d<sub>n</sub></code>\n    </li>\n    <li>The divisors may be repeative and in any order.</li>\n</ul>\n\n<h6>Output Format:</h6>\n\nFor each test case print the smallest integer not less than the given integer <code style=\"color:#000\">start</code> which is divisible by all the divisors <code style=\"color:#000\">\n    d<sub>1</sub>, d<sub>2</sub>, d<sub>3</sub>, ..., d<sub>n</sub></code> (each in newline).\n\n<br><br>\n\n\n<h6>Sample Input:</h6>\n<pre class=\"code\">5\n13 3 2 3 4\n62 2 6 5\n123 1 1\n48 1 50\n14 3 3 2 3 \n</pre>\n\n<h6>Sample Output:</h6>\n<pre class=\"code\">24\n90\n123\n50\n18\n\n</pre>\n\n<h6>Explaination:</h6>\n<ul>\n    <li>24 is the smallest integer which is divisible by 2, 3 & 4 and is not less than 13.</li>\n    <li>90 is the smallest integer which is divisible by 6 & 5 and is not less than 62.</li>\n    <li>123 is the smallest integer which is divisible by 1 and is not less than 123.</li>\n    <li>50 is the smallest integer which is divisible by 50 and is not less than 48.</li>\n    <li>18 is the smallest integer which is divisible by 2 & 3 and is not less than 14.</li>\n</ul>", "shortDescription" : "Find the smallest integer not less than the given integer <em>start</em> which is divisible by all the divisors <em>d<sub>1</sub>, d<sub>2</sub>, d<sub>3</sub>, ..., d<sub>n</sub></em>\n", "sampleInput" : "4\n13 3 2 3 4\n62 2 6 5\n123 1 1\n48 1 50", "sampleOutput" : "24\n90\n123\n50\n", "hiddenInput" : "20\n50 8 2 9 6 13 4 8 6 4\n187 4 4 3 11 8\n286 1 10\n369 6 8 7 12 10 9 5\n272 3 13 3 5\n40 10 2 6 11 11 8 3 2 8 14 1\n93 2 5 10\n393 2 11 3\n304 6 1 10 12 3 2 8\n41 1 4\n277 1 8\n304 2 12 9\n136 2 15 1\n165 2 3 10\n231 8 5 12 14 14 7 2 6 15\n127 5 13 12 15 6 1\n251 1 9\n71 3 2 7 15\n296 3 9 1 10\n232 3 13 10 5", "hiddenOutput" : "936\n264\n290\n2520\n390\n1848\n100\n396\n360\n44\n280\n324\n150\n180\n420\n780\n252\n210\n360\n260\n", "__v" : 0 }
{ "_id" : { "$oid" : "5a853c66683c743480f36309" }, "difficulty" : "easy", "id" : "E5", "title" : "Extract Each K<sup>th</sup> Term", "description" : "\n<h5>Extract Each K<sup>th</sup> Term</h5>\nGiven an array of integers, find the sum of each <code style=\"color:#000\">k<sup>th</sup></code> element from it.\n\n<br><br>\n\n<h6>Input Format:</h6>\n<ul>\n    <li>First line contains an integer <code style=\"color:#000\">T</code>, the number of testcases.</li>\n    <li>Next <code class=\"inlineCode\">T</code> lines contains an integer <code style=\"color:#000\">k</code>, followed by an integer <code style=\"color:#000\">n</code> followed by n different integers <code class=\"inlineCode\">e<sub>1</sub>, e<sub>2</sub>, e<sub>3</sub>, ..., e<sub>n</sub></code>\n    </li>\n</ul>\n\n<h6>Output Format:</h6>\n\nFor each test case, print the sum of each <code style=\"color:#000\">k<sup>th</sup></code> element from it. (each in newline).\n\n<br><br>\n\n\n<h6>Sample Input:</h6>\n<pre class=\"code\">3\n2 6 1 2 3 4 5 6\n3 11 -5 -4 -3 -2 -1 0 1 2 3 4 5\n1 4 5 10 15 20\n</pre>\n\n<h6>Sample Output:</h6>\n<pre class=\"code\">12\n0\n50\n\n</pre>\n\n\n<h6>Explaination:</h6>\n<ul>\n    <li>2 + 4 + 6 = 12</li>\n    <li>-3 + 0 + 3 = 0</li>\n    <li>5 + 10 + 15 + 20 = 50</li>\n</ul>    \n                      ", "shortDescription" : "Given an array of integers, find the sum of each <em>k<sup>th</sup></em> element from it.", "sampleInput" : "3\n2 6 1 2 3 4 5 6\n3 11 -5 -4 -3 -2 -1 0 1 2 3 4 5\n1 4 5 10 15 20", "sampleOutput" : "12\n0\n50\n", "hiddenInput" : "10\n7 13 24 46 -5 -14 -3 26 39 -45 3 3 41 -3 -37\n8 17 45 -32 44 -5 30 44 -48 44 -14 -22 3 -43 -34 47 -36 12 -15\n4 15 1 -36 28 48 5 -25 -32 2 -28 35 -47 -47 6 10 13\n3 18 -38 -10 38 -40 3 -31 23 44 37 14 17 49 -11 29 44 20 41 -12\n1 12 6 38 26 -17 -49 -32 -50 -11 5 13 43 9\n5 13 3 23 -45 -36 -39 30 18 42 -50 43 -44 -49 -35\n1 13 4 -6 -45 20 37 -18 -47 48 44 -41 -2 -30 35\n8 19 -50 -4 6 46 -39 -1 -28 -19 -40 -18 34 -20 -41 34 39 41 36 49 26\n4 15 -5 5 46 -18 -6 23 18 -38 -42 -36 47 -50 10 7 -16\n8 17 7 45 15 15 2 0 35 -44 29 -14 25 21 9 -7 41 -15 35", "hiddenOutput" : "39\n56\n3\n125\n-19\n4\n-1\n22\n-106\n-59\n", "__v" : 0 }
{ "_id" : { "$oid" : "5a853fbf683c743480f3630a" }, "difficulty" : "easy", "id" : "E6", "title" : "Knapsack Light", "description" : "\n<h5>Knapsack Light</h5>\nYou found two items, for each of them you know their weight. You have a max weight capacity of <code style=\"color:#000\">maxW</code>. If your weight capacity allows you to take with you both items, print <code style=\"color:#000\">both</code>. If you can take whichever one you want, print <code style=\"color:#000\">either</code>. If you cannot take any items, print <code style=\"color:#000\">none</code>. Otherwise, print <code style=\"color:#000\">first</code> or <code style=\"color:#000\">second</code> based on the index of the item which you can take.\n\n<br><br>\n\n<h6>Input Format:</h6>\n<ul>\n    <li>First line contains an integer <code style=\"color:#000\">T</code>, the number of testcases.</li>\n    <li>Next <code class=\"inlineCode\">T</code> lines contains an integer <code style=\"color:#000\">maxW</code>, followed by an integer <code style=\"color:#000\">weight1</code>, followed by an integer <code style=\"color:#000\">weight2</code>\n    </li>\n</ul>\n\n<h6>Output Format:</h6>\n\nFor each test case, print <code style=\"color:#000\">both</code> or <code style=\"color:#000\">either</code> or <code style=\"color:#000\">none</code> or <code style=\"color:#000\">first</code> or <code style=\"color:#000\">second</code> depending on the situation (each in newline).\n\n<br><br>\n\n\n<h6>Sample Input:</h6>\n<pre class=\"code\">6\n8 5 4\n9 10 4\n3 3 3\n3 3 4\n9 5 4\n2 5 3\n</pre>\n\n<h6>Sample Output:</h6>\n<pre class=\"code\">either\nsecond\neither\nfirst\nboth\nnone\n\n</pre>\n\n                      ", "shortDescription" : "You found two items, for each of them you know their weight. You have a max weight capacity of <em>maxW</em>. If your weight capacity allows you to take with you both items, print <em>both</em>. If you can take whichever one you want, print <em>either</em>. If you cannot take any items, print <em>none</em>. Otherwise, print <em>first</em> or <em>second</em> based on the index of the item which you can take.", "sampleInput" : "6\n8 5 4\n9 10 4\n3 3 3\n3 3 4\n9 5 4\n2 5 3", "sampleOutput" : "either\nsecond\neither\nfirst\nboth\nnone\n", "hiddenInput" : "20\n5 4 9\n11 11 6\n9 15 13\n3 15 7\n14 8 3\n3 13 9\n2 1 1\n15 9 2\n2 14 1\n13 2 10\n9 12 11\n12 14 4\n3 1 6\n8 9 5\n7 3 8\n1 2 12\n7 5 14\n3 13 7\n7 9 6\n8 11 3", "hiddenOutput" : "first\neither\nnone\nnone\nboth\nnone\nboth\nboth\nsecond\nboth\nnone\nsecond\nfirst\nsecond\nfirst\nnone\nfirst\nnone\nsecond\nsecond\n", "__v" : 0 }
{ "_id" : { "$oid" : "5a855f13683c743480f3630b" }, "difficulty" : "easy", "id" : "E7", "title" : "Even Digits Only", "description" : "\n<h5>Even Digits Only</h5>\nGiven an integer <code style=\"color:#000\">n</code>, print <code style=\"color:#000\">true</code> if it consists of only even digits; otherwise print <code style=\"color:#000\">false</code>\n\n<br><br>\n\n<h6>Input Format:</h6>\n<ul>\n    <li>First line contains an integer <code style=\"color:#000\">T</code>, the number of testcases.</li>\n    <li>Next <code style=\"color:#000\">T</code> lines contains an integer <code style=\"color:#000\">n</code>.</li>\n    where <code style=\"color:#000\">( n < 10<sup>9</sup> )</code>\n</ul>\n\n<h6>Output Format:</h6>\n\nFor each integer <code style=\"color:#000\">n</code> print either <code style=\"color:#000\">true</code> or <code style=\"color:#000\">false</code> (each in newline).\n\n<br><br>\n\n\n<h6>Sample Input:</h6>\n<pre class=\"code\">2\n248622\n642386\n</pre>\n\n<h6>Sample Output:</h6>\n<pre class=\"code\">true\nfalse\n\n</pre>\n                      ", "shortDescription" : "Given an integer <em>n</em>, print <em>true</em> if it consists on only even digits; otherwise print <em>false</em>", "sampleInput" : "2\n248622\n642386", "sampleOutput" : "true\nfalse\n", "hiddenInput" : "20\n1\n21080\n3\n30248\n18073\n2\n33824\n84006006\n86100\n440823\n88\n813\n81306600\n29420\n76688\n486484\n440\n72040\n47490681\n4806", "hiddenOutput" : "false\ntrue\nfalse\ntrue\nfalse\ntrue\ntrue\ntrue\nfalse\nfalse\ntrue\nfalse\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\nfalse\ntrue\n", "__v" : 0 }
{ "_id" : { "$oid" : "5a8724bac0ac201d9c928fe7" }, "difficulty" : "medium", "id" : "M3", "title" : "Beautiful String", "description" : "<h5>Beautiful String</h5>\nA string is said to be beautiful if <code style=\"color:#000\">b</code> occurs in it no more times than <code style=\"color:#000\">a</code>; <code style=\"color:#000\">c</code> occurs in it no more times than <code style=\"color:#000\">b</code>; <code style=\"color:#000\">d</code> occurs in it no more times than <code style=\"color:#000\">c</code>; ... ; <code style=\"color:#000\">z</code> occurs in it no more times than <code style=\"color:#000\">y</code>.\n<br>\nGiven a string <code style=\"color:#000\">s</code>, check whether it is beautiful.\n\n\n<br><br>\n\n<h6>Input Format:</h6>\n<ul>\n    <li>First line contains an integer <code style=\"color:#000\">T</code>, the number of strings to be checked.</li>\n    <li>Next <code style=\"color:#000\">T</code> lines contains the strings <code style=\"color:#000\">s<sub>1</sub>, s<sub>2</sub>, s<sub>3</sub>, ..., s<sub>T</sub></code>.</li>\n    where <code style=\"color:#000\">3 ≤ s.length ≤ 50</code> and each string comprises of only lowercase letters.\n</ul>\n\n<h6>Output Format:</h6>\n\nFor each string <code style=\"color:#000\">s<sub>1</sub>, s<sub>2</sub>, s<sub>3</sub>, ..., s<sub>T</sub></code>, print <code style=\"color:#000\">true</code> if it is a beautiful string or <code style=\"color:#000\">false</code> if it's not a beautiful string (each in newline).\n\n<br><br>\n\n\n<h6>Sample Input:</h6>\n<pre class=\"code\">7\nbbbaacdafe\naabbb\nbbc\nbbbaa\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyzz\nabcdefghijklmnopqrstuvwxyzqwertuiopasdfghjklxcvbnm\n</pre>\n\n<h6>Sample Output:</h6>\n<pre class=\"code\">true\nfalse\nfalse\nfalse\ntrue\nfalse\ntrue\n\n</pre>\n", "shortDescription" : "A string is said to be beautiful if <em>b</em> occurs in it no more times than <em>a</em>; <em>c</em> occurs in it no more times than <em>b</em>; <em>d</em> occurs in it no more times than <em>c</em>; ... ; <em>z</em> occurs in it no more times than <em>y</em>.\nGiven a string <em>s</em>, check whether it is beautiful.", "sampleInput" : "7\nbbbaacdafe\naabbb\nbbc\nbbbaa\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyzz\nabcdefghijklmnopqrstuvwxyzqwertuiopasdfghjklxcvbnm", "sampleOutput" : "true\nfalse\nfalse\nfalse\ntrue\nfalse\ntrue\n", "hiddenInput" : "7\nbbbaacdafe\naabbb\nbbc\nbbbaa\nabcdefghijklmnopqrstuvwxyz\nabcdefghijklmnopqrstuvwxyzz\nabcdefghijklmnopqrstuvwxyzqwertuiopasdfghjklxcvbnm", "hiddenOutput" : "true\nfalse\nfalse\nfalse\ntrue\nfalse\ntrue\n", "__v" : 0 }
{ "_id" : { "$oid" : "5a8bbcbc6504921c90823528" }, "difficulty" : "medium", "id" : "M4", "title" : "Pronic Number", "description" : "\n<h5>Pronic Number</h5>\nA pronic number (also known as oblong number, rectangular number or heteromecic number), is a number which is the product of two consecutive integers, i.e. it can be represented as <code style=\"color:#000\">x * (x + 1)</code> for some integer x. The first few pronic numbers are: <code style=\"color:#000\">0, 2, 6, 12, 20, 30, 42...</code>\n<br>\nGiven a whole number <code style=\"color:#000\">n</code> checks whether it is a pronic number and print <code style=\"color:#000\">true</code> if it is and <code style=\"color:#000\">false</code> otherwise.\n\n<br><br>\n\n<h6>Input Format:</h6>\n<ul>\n    <li>First line contains an integer <code style=\"color:#000\">T</code>, the number of testcases.</li>\n    <li>Next <code style=\"color:#000\">T</code> lines contains the different positive integers <code style=\"color:#000\">n<sub>1</sub>, n<sub>2</sub>, n<sub>3</sub>, ..., n<sub>T</sub></code>.</li>\n        where <code style=\"color:#000\">( 0 ≤ n ≤ 2<sup>25</sup> )</code>\n</ul>\n\n<h6>Output Format:</h6>\n\nFor each positive integers <code style=\"color:#000\">n<sub>1</sub>, n<sub>2</sub>, n<sub>3</sub>, ..., n<sub>T</sub></code> print <code style=\"color:#000\">true</code> if it is a pronic number and <code style=\"color:#000\">false</code> otherwise. (each in newline).\n\n<br><br>\n\n\n<h6>Sample Input:</h6>\n<pre class=\"code\">4\n12\n0\n15\n25005000\n</pre>\n\n<h6>Sample Output:</h6>\n<pre class=\"code\">true\ntrue\nfalse\ntrue\n\n</pre>\n\n\n<h6>Explaination:</h6>\n<ul>\n    \n<li>0 = 0 × 1 Hence output is <code style=\"color:#000\">true</code></li>\n<li>12 = 3 × 4 Hence output is <code style=\"color:#000\">true</code></li>\n<li>15 = 3 × 5 Hence output is <code style=\"color:#000\">false</code></li>\n<li>25005000 = 5000 × 5001 Hence output is <code style=\"color:#000\">true</code></li>\n    \n</ul>\n                      \n                      ", "shortDescription" : "A pronic number, is a number which is the product of two consecutive integers, i.e. it can be represented as <em>x * (x + 1)</em> for some integer x.", "sampleInput" : "4\n12\n0\n15\n25005000", "sampleOutput" : "true\ntrue\nfalse\ntrue\n", "hiddenInput" : "13\n12\n0\n15\n25005000\n42\n182\n2440\n25760\n42230\n1001000\n24995000\n24995111\n24856321", "hiddenOutput" : "true\ntrue\nfalse\ntrue\ntrue\ntrue\nfalse\ntrue\ntrue\ntrue\ntrue\nfalse\nfalse\n", "__v" : 0 }
{ "_id" : { "$oid" : "5a8bde0122808c21abb8e318" }, "difficulty" : "easy", "id" : "H1", "title" : "Word Square", "description" : "\n<h5>Word Square</h5>\nA Word Square is a set of words written out in a square grid, such that the same words can be read both horizontally and vertically. The number of words, equal to the number of letters in each word, is known as the order of the square.\n<br><br>\nFor example, this is an order 5 square found in the ruins of Herculaneum:<br><br>\n<img src=\"https://i.gyazo.com/e226262e3ada421d4323369fb6cf66a6.jpg\">\n<br><br>\nGiven a string of various uppercase letters, check whether a Word Square can be formed from it.\n\nNote that you should use each letter from letters the exact number of times it occurs in the string. If a Word Square can be formed, print true, otherwise return false.\n<br><br>\n\n<h6>Input Format:</h6>\n<ul>\n    <li>First line contains an integer <code style=\"color:#000\">T</code>, the number of strings.</li>\n    <li>Next <code style=\"color:#000\">T</code> lines contains the strings <code style=\"color:#000\">s<sub>1</sub>, s<sub>2</sub>, s<sub>3</sub>, ..., s<sub>T</sub></code>.</li>\n</ul>\n\n<h6>Output Format:</h6>\n\nFor each string <code style=\"color:#000\">s<sub>1</sub>, s<sub>2</sub>, s<sub>3</sub>, ..., s<sub>T</sub></code> print <code style=\"color:#000\">true</code> if a word square can be formed, otherwise print <code style=\"color:#000\">false</code>.\n\n<br><br>\n\n\n<h6>Sample Input:</h6>\n<pre class=\"code\">3\nSATORAREPOTENETOPERAROTAS\nAAAAEEEENOOOOPPRRRRSSTTTT\nNOTSQUARE\n</pre>\n\n<h6>Sample Output:</h6>\n<pre class=\"code\">true\ntrue\nfalse\n\n</pre>\n\n", "shortDescription" : "A Word Square is a set of words written out in a square grid, such that the same words can be read both horizontally and vertically. The number of words, equal to the number of letters in each word, is known as the order of the square. Given a string of various uppercase letters, check whether a Word Square can be formed from it.", "sampleInput" : "3\nSATORAREPOTENETOPERAROTAS\nAAAAEEEENOOOOPPRRRRSSTTTT\nNOTSQUARE", "sampleOutput" : "true\ntrue\nfalse\n", "hiddenInput" : "4\nSATORAREPOTENETOPERAROTAS\nAAAAEEEENOOOOPPRRRRSSTTTT\nNOTSQUARE\nsdasd", "hiddenOutput" : "sadasdd", "__v" : 0 }
{ "_id" : { "$oid" : "5a8be465c0bba42a2e07773e" }, "difficulty" : "hard", "id" : "H1", "title" : "Word Square", "description" : "\n<h5>Word Square</h5>\nA Word Square is a set of words written out in a square grid, such that the same words can be read both horizontally and vertically. The number of words, equal to the number of letters in each word, is known as the order of the square.\n<br><br>\nFor example, this is an order 5 square found in the ruins of Herculaneum:<br><br>\n<img src=\"https://i.gyazo.com/e226262e3ada421d4323369fb6cf66a6.jpg\">\n<br><br>\nGiven a string of various uppercase letters, check whether a Word Square can be formed from it.\n\nNote that you should use each letter from letters the exact number of times it occurs in the string. If a Word Square can be formed, print true, otherwise return false.\n<br><br>\n\n<h6>Input Format:</h6>\n<ul>\n    <li>First line contains an integer <code style=\"color:#000\">T</code>, the number of strings.</li>\n    <li>Next <code style=\"color:#000\">T</code> lines contains the strings <code style=\"color:#000\">s<sub>1</sub>, s<sub>2</sub>, s<sub>3</sub>, ..., s<sub>T</sub></code>.</li>\n</ul>\n\n<h6>Output Format:</h6>\n\nFor each string <code style=\"color:#000\">s<sub>1</sub>, s<sub>2</sub>, s<sub>3</sub>, ..., s<sub>T</sub></code> print <code style=\"color:#000\">true</code> if a word square can be formed, otherwise print <code style=\"color:#000\">false</code>.\n\n<br><br>\n\n\n<h6>Sample Input:</h6>\n<pre class=\"code\">3\nSATORAREPOTENETOPERAROTAS\nAAAAEEEENOOOOPPRRRRSSTTTT\nNOTSQUARE\n</pre>\n\n<h6>Sample Output:</h6>\n<pre class=\"code\">true\ntrue\nfalse\n\n</pre>\n\n", "shortDescription" : "A Word Square is a set of words written out in a square grid, such that the same words can be read both horizontally and vertically. The number of words, equal to the number of letters in each word, is known as the order of the square. Given a string of various uppercase letters, check whether a Word Square can be formed from it.", "sampleInput" : "3\nSATORAREPOTENETOPERAROTAS\nAAAAEEEENOOOOPPRRRRSSTTTT\nNOTSQUARE", "sampleOutput" : "true\ntrue\nfalse\n", "hiddenInput" : "20\nSATORAREPOTENETOPERAROTAS\nAAAAEEEENOOOOPPRRRRSSTTTT\nNOTSQUARE\nBITICETEN\nAAAAACEEELLRRRTT\nAAACCEEEEHHHMMTT\nAAACCEEEEHHHMMTTXXX\nABCD\nABC\nGHBEAEFGCIIDFHGG\nAAHHFDKIHHFCXZBFDERRRTXXAA\nAABBCCDDEEFFGGGG\nABCABCABC\nFRACTUREOUTLINEDBLOOMINGSEPTETTE\nGLASSESRELAPSEIMITATESMEAREDTANNERY\nLIMBAREACORKKNEE\nDESCENDANTECHENEIDAESHORTCOATSCERBERULUSENTEROMERENECROLATERDIOUMABANAADALETABATNATURENAMETESSERATED\nCONGRATUALATIONS\nHEARTEMBERABUSERESINTREND\nOHLOLWHAT", "hiddenOutput" : "true\ntrue\nfalse\ntrue\ntrue\ntrue\nfalse\nfalse\nfalse\ntrue\nfalse\ntrue\ntrue\nfalse\nfalse\nfalse\ntrue\nfalse\ntrue\ntrue\n", "__v" : 0 }
{ "_id" : { "$oid" : "5a8be4e3c0bba42a2e077741" }, "difficulty" : "hard", "id" : "H2", "title" : "Substitution Cipher Decryption", "description" : "\n<h5>Substitution Cipher Decryption</h5>\n\n<p>You intercept a note being passed between your classmates, and while trying to read it discover that it's encrypted. Since you're a fan of puzzles, you decide to crack the code. You know the following two details about the note:</p>\n<ul>\n<li>Your classmates use a simple substitution cipher. It works as follows:\n<ul>\n<li>Consider the plaintext alphabet (\"abcdef...xyz\"). Then take its permutation and call it a <em>ciphertext alphabet</em>.</li>\n<li>Write down the <em>ciphertext alphabet</em> under the plaintext alphabet. Now the symbols that are located in the same column correspond to one another.</li>\n<li>Now look through the message symbol by symbol and change each one to its replacement from the <em>ciphertext alphabet</em>.</li>\n</ul>\n</li>\n<li>The contents of the message are followed by a signature encrypted in the same way.</li>\n</ul>\n<p>To be thorough, you make sure to iterate over all the ciphers satisfying the above-mentioned requirements. The most reasonable approach is to choose the one with lexicographically smallest <em>ciphertext alphabet</em> out of them.</p>\n\n<b>Note:</b>\n<p>String A is <em>lexicographically smaller</em> than string B either if A is a prefix of B (and A ≠ B), or if there exists such index i (0 ≤ i &lt; min(A.length, B.length)), that A<sub>i</sub> &lt; B<sub>i</sub>, and for any j (0 ≤ j &lt; i) A<sub>j</sub> = B<sub>j</sub>. The lexicographic comparison of strings is implemented by operator &lt; in modern programming languages.</p>\n\n<p>Given the <code style=\"color:#000\">contents</code> of the message, a <code style=\"color:#000\">signature</code> and an <code style=\"color:#000\">encryptedSignature</code>, what text will you end up with after applying the approach described above?</p>\n\n<br><br>\n\n<h6>Input Format:</h6>\n<ul>\n    <li>First line contains an integer <code style=\"color:#000\">T</code>, the number of testcases.</li>\n    <li>Next <code style=\"color:#000\">T</code> lines contains <code style=\"color:#000\">contents</code>, followed by <code style=\"color:#000\">signature</code>; followed by <code style=\"color:#000\">encryptedSignature</code>.\n    </li>\n    \n</ul>\n\n<h6>Output Format:</h6>\n\nFor each testcase print the decryptedMessage <code style=\"color:#000\">d<sub>1</sub>, d<sub>2</sub>, d<sub>3</sub>, ..., d<sub>T</sub></code> (each in newline).\n\n<br><br>\n\n\n<h6>Sample Input:</h6>\n<pre class=\"code\">4\nissomtoqmvjts alice james\na b z\nz hhh lll\nefvwmigoycjablxhdtusznrpqk tdagwolcqu cgbqorahmx\n</pre>\n\n<h6>Sample Output:</h6>\n<pre class=\"code\">keepitprivate\na\nz\nefvxqhdwytilakucbrspzmongj\n\n</pre>\n\n<p><strong>Explaination</strong></p>\n<p>For <code style=\"color:#000\">contents = \"issomtoqmvjts\"</code>, <code style=\"color:#000\">signature = \"alice\"</code><br><br>\nand <code style=\"color:#000\">encryptedSignature = \"james\"</code>, the output should be\n<code style=\"color:#000\">keepitprivate</code>\n<p>Here is what we know for sure thanks to <code style=\"color:#000\">signature</code> and <code style=\"color:#000\">encryptedSignature</code>:</p>\n<pre><code style=\"color:#000\"> plaintext alphabet: abcdefghijklmnopqrstuvwxyz\nciphertext alphabet: j*e*s***m**a**************\n</code></pre>\n<p>Now let's choose the lexicographically smallest ciphertext alphabet out of all the candidates:</p>\n<pre><code style=\"color:#000\"> plaintext alphabet: abcdefghijklmnopqrstuvwxyz\nciphertext alphabet: jbecsdfgmhiaklnopqrtuvwxyz\n</code></pre>\n<p>You can see that <code style=\"color:#000\">'i'</code> from the ciphertext corresponds to <code style=\"color:#000\">'k'</code>, <code style=\"color:#000\">'s'</code> corresponds to <code style=\"color:#000\">'e'</code>, etc.</p>\n\n                      \n                      ", "shortDescription" : "You intercept a note being passed between your classmates, and while trying to read it discover that it's encrypted. Since you're a fan of puzzles, you decide to crack the code. You know the following two details about the note:", "sampleInput" : "4\nissomtoqmvjts alice james\na b z\nz hhh lll\nefvwmigoycjablxhdtusznrpqk tdagwolcqu cgbqorahmx", "sampleOutput" : "keepitprivate\na\nz\nefvxqhdwytilakucbrspzmongj\n", "hiddenInput" : "4\nissomtoqmvjts alice james\na b z\nz hhh lll\nefvwmigoycjablxhdtusznrpqk tdagwolcqu cgbqorahmx", "hiddenOutput" : "keepitprivate\na\nz\nefvxqhdwytilakucbrspzmongj\n", "__v" : 0 }
{ "_id" : { "$oid" : "5a8be4f0c0bba42a2e077742" }, "difficulty" : "hard", "id" : "H3", "title" : "Round Robin Algorithm", "description" : "<b>Round Robin CPU scheduling algorithm</b>\n<ul>\n<li>It is simple, easy to implement, and starvation-free as all processes get fair share of CPU.</li>\n<li>One of the most commonly used technique in CPU scheduling as a core.</li>\n<li>The disadvantage of it is more overhead of context switching.</li>\n<li>It is the preemptive process scheduling algorithm.</li>\n<li>Each process is provided a fix time to execute, it is called a **time quantum**.</li>\n<li>Once a process is executed for a given time period, it is preempted and other process executes for a given time period.</li>\n<li>Context switching is used to save states of preempted processes.</li>\n</ul>\n\n<b>How to compute below times in Round Robin using a program?</b>\n<ul>    \n    <li>Completion Time: Time at which process completes its execution.</li>\n    <li>Turn Around Time: Time Difference between execution time and arrival time.</li>\n\t\tTurn Around Time = Execution Time – Arrival Time\n    <li>Waiting Time(W.T): Time Difference between turn around time and burst time.</li>\n\t    Waiting Time = Turn Around Time – Execution Time\n</ul>\n<b>Compute average waiting time and turnaround time</b>\n<br><br>\n\n<b>Input</b><br>\n<ul>\n<code style=\"color:#000\">T</code><br>\n<code style=\"color:#000\">C Q  P1 P2 P3 ... PT  </code>\n\n<li><code style=\"color:#000\">T</code>  No. of testcases</li>    \n<li><code style=\"color:#000\">C</code>  Count of processes</li>\n<li><code style=\"color:#000\">Q</code> Time Quantum </li>\n<li><code style=\"color:#000\">P1 P2 P3 ... PT</code> Execution time</li>\n</ul>\n\n\n<b>Output </b><br>\nPlease print integer values\n<li><code style=\"color:#000\">AWT</code>  Average waiting time</li>\n<li><code style=\"color:#000\">ATT</code>  Average turnaround time</li>\n\n<b>Explanation</b> \n<div class=\"row\">\n<img src=\"https://cdncontribute.geeksforgeeks.org/wp-content/uploads/round-robin-1.jpg\">\n</div>\n                    \n                      \n<h6>Sample Input:</h6>\n<pre class=\"code\">2\n3 1 10 5 8\n3 3 12 23 14\n</pre>\n\n<h6>Sample Output:</h6>\n<pre class=\"code\">11\n19\n23\n40\n\n</pre>  \n                      \n                      \n                      ", "shortDescription" : "Round Robin is a CPU scheduling algorithm where each process is assigned a fixed time slot in a cyclic way.", "sampleInput" : "2\n3 1 10 5 8\n3 3 12 23 14\n", "sampleOutput" : "11\n19\n23\n40", "hiddenInput" : "2\n5 2 12 22 34 55 33\n10 8 5 20 156 335 334 221 389 394 583 299\n\n\n\n", "hiddenOutput" : "82\n113\n1511\n1784\n", "__v" : 0 }
{ "_id" : { "$oid" : "5a8bf2df6dfc79350aa9cd25" }, "difficulty" : "hard", "id" : "B1", "title" : " How Many Words? (No Instructions)", "description" : "\n<h5> How Many Words? (No Instructions)</h5>\nGiven the sample inputs and sample outputs, understand the algorithmn and write the code.\n\n<br><br>\n\n<h6>Input Format:</h6>\n<ul>\n    <li>First line contains an integer <code style=\"color:#000\">T</code>, the number of testcases.</li>\n    <li>Next <code style=\"color:#000\">T</code> lines contains the strings <code style=\"color:#000\">s<sub>1</sub>, s<sub>2</sub>, s<sub>3</sub>, ..., s<sub>T</sub></code>.</li>\n    where <code style=\"color:#000\">1 ≤ s.length ≤ 50</code>\n</ul>\n\n<h6>Output Format:</h6>\n\nFor each string <code style=\"color:#000\">s<sub>1</sub>, s<sub>2</sub>, s<sub>3</sub>, ..., s<sub>T</sub></code> print it's output (each in newline).\n\n<br><br>\n\n<div class=\"row\">\n    <div class=\"col-md-6\">\n<h6>Sample Input:</h6>\n<pre class=\"code\">11\nword\nhello world\nbonus question\nMy cat is Waiting fOR a Dog.\nwo ahr dnk wno yrn sdo\nwowordrd\nThis sentence have one word.\nThis have two words, not one word.\nOne word + one word = three words ;-)\ndrow is not a word\nwwoorrdd is two word? maybe not...\n</pre>\n</div>\n<div class=\"col-md-6\">\n<h6>Sample Output:</h6>\n<pre class=\"code\">1\n1\n0\n1\n2\n1\n1\n2\n3\n1\n2\n\n</pre>\n</div>\n</div>", "shortDescription" : "Given the sample inputs and sample outputs, understand the algorithmn and write the code.", "sampleInput" : "11\nword\nhello world\nbonus question\nMy cat is Waiting fOR a Dog.\nwo ahr dnk wno yrn sdo\nwowordrd\nThis sentence have one word.\nThis have two words, not one word.\nOne word + one word = three words ;-)\ndrow is not a word\nwwoorrdd is two word? maybe not...", "sampleOutput" : "1\n1\n0\n1\n2\n1\n1\n2\n3\n1\n2\n", "hiddenInput" : "15\nword\nhello world\nbonus question\nMy cat is Waiting fOR a Dog.\nwo ahr dnk wno yrn sdo\nwowordrd\nThis sentence have one word.\nThis have two words, not one word.\nOne word + one word = three words ;-)\ndrow is not a word\nwwoorrdd is two word? maybe not...\nNo matter what people tell you, words and ideas can change the world.\nWithout continual growth and progress, such words as improvement, achievement, and success have no meaning.\nThe word Clock tells in simple words what the time is anywhere in the world.\nrwoWWWwODrwRROwWRWwwwOrodoDOwOoDrWrRdOOowWDrOrrwwWodwrWdDrwdRoRwORROwwWDWdODoDROWrwDwrrDoDD", "hiddenOutput" : "1\n1\n0\n1\n2\n1\n1\n2\n3\n1\n2\n2\n2\n3\n5\n", "__v" : 0 }
